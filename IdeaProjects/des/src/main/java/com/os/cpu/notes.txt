A sample output of this project is shown below:
Initialized scheduler with 3 processes.
Policy: Round Robin
Quantum: 3.0
-> Context Change at time = 9.329
---------------------------------------
| Exits            | Enters           |
---------------------------------------
| Process0         | Process1         |
---------------------------------------
-> Context Change at time = 11.233
---------------------------------------
| Exits            | Enters           |
---------------------------------------
| Process1         | Process2         |
---------------------------------------
---------------------------------------------------------------------------
| Process        | Wait Time | Execution Time | Arrival Time | Burst Time |
---------------------------------------------------------------------------
|Process0        |0.000      |3.767           |0.000         |3.767       |
|Process1        |0.000      |1.904           |4.763         |1.904       |
|Process2        |1.904      |5.735           |9.329         |3.831       |
+++++++++++++++++++++++++++++++++++++++++++++
|Average         |3.744      |6.912           |Total Burst   |9.502       |
---------------------------------------------------------------------------

//Main.java
/*
//Read processJSON1.json
*/
        /*
        // JSON parser object to parse read file
        JSONParser jsonParser = new JSONParser();
        try(FileReader reader = new FileReader("/home/break/tools/gits/des/Friend_William_Operating_Systems_discrete_event_simulator_shortest_wait_algorithm/IdeaProjects/des/src/main/java/com/os/cpu/processesJSON1.json"))
        {
        //try (FileReader reader = new FileReader("users.json")) {
            // Read JSON file
            Object obj = jsonParser.parse(reader);
            JSONArray processList2 = (JSONArray) obj;
            // Iterate over employee array
            processList2.forEach(process -> parseJSONObject((JSONObject) process));
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ParseException e) {
            e.printStackTrace();
        };

    private static void parseJSONObject(JSONObject proc) {
        JSONObject process = new JSONObject() proc.get();
        // Get process name
        String name = (String) process.get("ProcessN");
        System.out.println(name);
        // Get
        String firstName = (float) process.get("firstName");
        System.out.println(firstName);
        // Get
        String lastName = (float) process.get("lastName");
        System.out.println(lastName);
        // Get
        String userName = (float) process.get("userName");
        System.out.println(userName);
        // Get user email name
        String email = (float) process.get("email");
        System.out.println(email);
    }
    */



/*
  import org.json.simple.JSONArray;
  import org.json.simple.JSONObject;
  import org.json.simple.parser.JSONParser;
  <p>
  import java.io.FileReader;
  import java.util.Iterator;
  <p>

   * @author Crunchify.com
   * How to Read JSON Object From File in Java?
  <p>
 public class CrunchifyJSONReadFromFile {
 *
    @SuppressWarnings("unchecked")
 *

    public static void main(String[] args) {


 */
/*
//READ FILE 1
        try {
            HashMap<String, String> procHM = new HashMap<String, String>();
            //pull processes from file
            Object objP = (Object) parser.parse(new FileReader("/home/break/tools/gits/des/Friend_William_Operating_Systems_discrete_event_simulator_shortest_wait_algorithm/IdeaProjects/des/src/main/java/com/os/cpu/process.json"));
            //copy
            JSONObject jsonObjectP = (JSONObject) objP;
            //create JSON ArrayList
            JSONArray procP = (JSONArray) jsonObjectP.get("process");
            //Iterate over file
            Iterator<JSONObject> iteratorP = procP.iterator();
            try { //}
                while (iteratorP.hasNext()) {
                    System.out.println(iteratorP.next());
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        } catch (IOException | ParseException e) {
            throw new RuntimeException(e);
        }
*/
/*
//READ FILE 2
        //JSON parser object to parse read file
        JSONParser jsonParser = new
                JSONParser();

        try (FileReader reader = new FileReader("/home/break/tools/gits/des/Friend_William_Operating_Systems_discrete_event_simulator_shortest_wait_algorithm/IdeaProjects/des/src/main/java/com/os/cpu/process.json")) {
            //Read JSON file
            Object pcbObj = jsonParser.parse(reader);
            JSONArray pcbList = (JSONArray) pcbObj;
            System.out.println(pcbList);
            //Iterate over employee array
            pcbList.forEach(pcbEmp -> parseProcessObject((JSONObject) pcbEmp));

        } catch (IOException | ParseException e) {
            e.printStackTrace();
        }


    }
*/

/*
//Parse 1
 */
        /*
        private static void parseProcessObject(JSONObject procc){

            JSONObject pcbJ0 = (JSONObject) procc.get("process");

            String name = (String) pcbJ0.get("processN");
            System.out.println(name);

            float waitTime = (float) pcbJ0.get("waitTime");
            System.out.println(waitTime);

            float executionTime = (float) pcbJ0.get("executionTime");
            System.out.println(executionTime);

            float arrivalTime = (float) pcbJ0.get("arrivalTime");
            System.out.println(arrivalTime);

            float burstTime = (float) pcbJ0.get("burstTime");
            System.out.println(burstTime);
        }*/
/*
//Parse 2
*/
/*        private static void parseEmployeeObject(JSONObject employee)
        {
            //Get employee object within list
            JSONObject employeeObject = (JSONObject) employee.get("employee");

            //Get employee first name
            String firstName = (String) employeeObject.get("firstName");
            System.out.println(firstName);

            //Get employee last name
            String lastName = (String) employeeObject.get("lastName");
            System.out.println(lastName);

            //Get employee website name
            String website = (String) employeeObject.get("website");

            System.out.println(website);
    }
*/
// Object obj = parser.parse(new FileReader("/home/break/tools/gits/des/Friend_William_Operating_Systems_discrete_event_simulator_shortest_wait_algorithm/IdeaProjects/des/src/main/java/com/os/cpu/crunchify.json"));
// Object obj =  parser.parse(new FileReader("/home/break/tools/gits/des/Friend_William_Operating_Systems_discrete_event_simulator_shortest_wait_algorithm/IdeaProjects/des/src/main/java/com/os/cpu/processes.json"));
// JSONObject jsonObject = (JSONObject) parser.parse(new FileReader("/home/break/tools/gits/des/Friend_William_Operating_Systems_discrete_event_simulator_shortest_wait_algorithm/IdeaProjects/des/src/main/java/com/os/cpu/processes.json"));
// A JSON object. Key value pairs are unordered. JSONObject supports java.util.Map interface.
            /* Array
              JSONParser parser = new JSONParser();
              Object obj  = parser.parse(content);
              JSONArray array = new JSONArray();
              array.add(obj);
             */
            /* No array
              JSONParser parser = new JSONParser();
              Object obj  = parser.parse(content);
             */
            /* direct fix
            JSONObject unitsObj = parser.parse(new FileReader("file.json");
             */
//JSONObject jsonObject3 = (JSONObject) obj;
// A JSON array. JSONObject supports java.util.List interface.
//JSONArray companyList = (JSONArray) jsonObject.get("Company List");
//proc = (JSONArray) jsonObject.get("process");
// An iterator over a collection. Iterator takes the place of Enumeration in the Java Collections Framework.
// Iterators differ from enumerations in two ways:
// 1. Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics.
// 2. Method names have been improved.
            /*
            //a
            Iterator<JSONObject> iterator = proc.iterator();
            while (iterator.hasNext()) {
                System.out.println(iterator.next());
            }
            */
//b
//for (JSONObject object : (Iterable<JSONObject>) proc) {
//    System.out.println(object);
//}
    public void setCompletionTimesOld(PCB [] pcb){
        Double currentCompletionTime = 0.0;
        Double currentArrivalTime = 0.0;
        Double lastArrivalTime = pcb[0].getArrivalTime();
        Double difference = 0.0;
        for(int i=0; i==pcb.length; i++){
            currentArrivalTime = pcb[i].getArrivalTime();
            if(currentArrivalTime > lastArrivalTime){
                difference = currentArrivalTime - lastArrivalTime;
                lastArrivalTime = currentArrivalTime;
                currentCompletionTime += pcb[i].getBurstTime() + difference;
            }
            else{
                currentCompletionTime += pcb[i].getBurstTime();
            }
            pcb[i].setCompletionTime(currentCompletionTime);
        }
    }

    public void setTurnAroundTimesOld(PCB [] pcb){
        Double currentTurnAroundTime = 0.0;
        for(int i=0; i<pcb.length; i++){
            currentTurnAroundTime = pcb[i].getCompletionTime() - pcb[i].getArrivalTime();
            pcb[i].setTurnAroundTime(currentTurnAroundTime);
        }
    }

    public void setWaitTimesOld(PCB [] pcb) {
        Double currentWaitTime = 0.0;
        for (int i = 0; i < pcb.length; i++) {
            currentWaitTime = pcb[i].getTurnAroundTime() - pcb[i].getBurstTime();
            pcb[i].setWaitTime(currentWaitTime);
        }
    }
